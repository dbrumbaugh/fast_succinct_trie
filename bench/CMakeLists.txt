add_executable(bench_fst bench.cpp)
set_target_properties(bench_fst PROPERTIES COMPILE_DEFINITIONS "USE_FST")

set(DARTSC_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/darts-clone)
include_directories(${DARTSC_SOURCE_DIR}/include)
add_executable(bench_dartsc bench.cpp)
set_target_properties(bench_dartsc PROPERTIES COMPILE_DEFINITIONS "USE_DARTSC")

set(XCDAT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/xcdat)
configure_file(${XCDAT_SOURCE_DIR}/xcdat_config.hpp.in ${XCDAT_SOURCE_DIR}/include/xcdat/xcdat_config.hpp)
include_directories(${XCDAT_SOURCE_DIR}/include)
file(GLOB_RECURSE XCDAT_SOURCES "${XCDAT_SOURCE_DIR}/src/*.cpp")
add_executable(bench_xcdat bench.cpp ${XCDAT_SOURCES})
set_target_properties(bench_xcdat PROPERTIES COMPILE_DEFINITIONS "USE_XCDAT")

set(TX_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tx-trie)
include_directories(${TX_SOURCE_DIR})
add_executable(bench_tx bench.cpp ${TX_SOURCE_DIR}/tx.cpp ${TX_SOURCE_DIR}/ssv.cpp)
set_target_properties(bench_tx PROPERTIES COMPILE_DEFINITIONS "USE_TX")

set(MARISA_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/marisa-trie)
include_directories(${MARISA_SOURCE_DIR}/include)
include_directories(${MARISA_SOURCE_DIR}/lib)
file(GLOB_RECURSE MARISA_SOURCES "${MARISA_SOURCE_DIR}/lib/*/*.cc")
add_executable(bench_marisa bench.cpp ${MARISA_SOURCES})
set_target_properties(bench_marisa PROPERTIES COMPILE_DEFINITIONS "USE_MARISA")

set(PDT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/path_decomposed_tries)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-private-field -Wno-unused-local-typedef -Wno-reorder")
find_package(Boost 1.42.0 COMPONENTS unit_test_framework iostreams system thread filesystem REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})
link_directories (${Boost_LIBRARY_DIRS})
include_directories(${PDT_SOURCE_DIR})
add_subdirectory(${PDT_SOURCE_DIR}/succinct EXCLUDE_FROM_ALL)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (SUCCINCT_USE_LIBCXX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    endif ()
endif ()
if (UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2")
endif ()
add_subdirectory(${PDT_SOURCE_DIR}/tries)
add_subdirectory(${PDT_SOURCE_DIR}/repair)
add_executable(bench_pdt bench.cpp)
target_link_libraries(bench_pdt succinct ${Boost_LIBRARIES})
set_target_properties(bench_pdt PROPERTIES COMPILE_DEFINITIONS "USE_PDT")
